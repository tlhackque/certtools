#!/usr/bin/perl

use warnings;
use strict;

# Keeping mondules used to a bare minimum - especially for checks
use File::Basename;
use Text::Abbrev;

# Verify the the modules used by the perl tools are installed
# Most are core modules, so this should be painless.

my $copyright = << 'COPYRIGHT';
Copyright (C) 2021, 2023 Timothe Litt <litt at acm.org>
Use --man for license information.
COPYRIGHT

our $VERSION = '$Id$';

my %mods = map { $_ => 0 } ( qw( IO::Socket::SSL ) );

sub help;
sub man;
sub version;
my( $quiet, $debug );

my %opts = ( quiet   => \$quiet,
             debug   => \$debug,
             version => \&version,
             help    => \&help,
             man     => \&help,
           );
while( @ARGV && $ARGV[0] =~ /^--?(.*)$/ ) {
    my $opt = $1;
    shift @ARGV;
    last if( $opt eq '' );
    my $name = { abbrev( keys %opts ) }->{$opt};
    if( $name ) {
        my $var = $opts{$name};
        if( ref $var eq 'CODE' ) {
            $var->( $name );
        } else {
            $$var = 1;
        }
    } else {
        printf STDERR ( "Unknown option --%s\n", $opt );
        exit 1;
    }
}
if( @ARGV ) {
    require Scalar::Util;
    Scalar::Util->import( qw/isvstring/ );
    my %pragma = (
            map { $_ => 1 } (qw/attributes autodie autouse base bigint bignum bigrat/,
                             qw/blib bytes charnames constant/,
                             qw/diagnostics encoding feature fields filetest if integer/,
                             qw/less lib locale mro/,
                             qw/open ops overload overloading parent re sigtrap sort/,
                             qw/strict vars subs threads thread::shared utr8 vars vmsish/,
                             qw/warnings warnings::register/ ) );

    my( $first, $indata ) = ( 1, 0 );
    while( <ARGV> ) {
        printf STDERR ( "Starting %s\n", $ARGV ), $first = 0 if( $first && $debug );
        chomp;
        s/^\s+//;
        s/\s+$//;
        next if( $indata || /^$/ );
        if( /^__(?:DATA|END)__$/ ) {
            $indata = 1;
            next;
        }
        if( /^.*(?:eval\s*["{'])?(require|use)\s+([\w:]+)\s*[;(q'"]/ ) {
            my( $verb, $mod ) = ( $1, $2 );
            if( $debug ) {
                my $attrs = '';
                if( $pragma{$mod} ) {
                    $attrs = 'pragma';
                } elsif( $mod =~ /^TL::/ ) {
                    $attrs = 'private';
                } elsif( exists $mods{$mod} ) {
                    $attrs = "duplicate";
                }
                printf STDERR (
                        "%s:%u %s $mod %s\n", $ARGV, $., $verb,
                        $attrs ? "($attrs)" : '' );
            }
            next if( exists $mods{$mod} || $pragma{$mod} || $mod =~ /^TL::/ );
            $mods{$mod} = 0;
        }
    } continue {
        if( eof ) {
            printf STDERR ( "End of %s\n", $ARGV ) if( $debug );
            close( ARGV );
            ( $first, $indata ) = ( 1, 0 );
        }
    }
    my $w = 0;
    foreach my $mod ( keys %mods ) {
        $w = length( $mod ) if( length( $mod ) > $w );
        eval "require $mod";
        if( $@ ) {
            printf STDERR ( "%s needs %s, which is not installed\n", $ARGV, $mod );
            next;
        }
        my $ver = eval "\$${mod}::VERSION";
        $ver        = 0 unless( defined $ver );
        $ver        = sprintf( "%vd", $ver ) if( isvstring( $ver ) );
        $mods{$mod} = $ver;
    }
    foreach my $mod ( sort keys %mods ) {
        my $ver = $mods{$mod};
        $ver = 'unknown' if( $ver eq '0' );
        printf( "%-*s %s\n", $w, $mod, $ver );
    }
    exit( 0 );
} else {
    while( <DATA> ) {
        chomp;
        s/^\s+//;
        s/\s+$//;
        next if( /^$/ );
        last if( /^__END__$/ );
        my( $mod, $ver ) = split( /\s+/, $_ );
        $mods{$mod} = $ver;
    }
}

print STDERR ( "Checking prerequisites\n" ) unless( $quiet );

my $w = 0;
foreach( keys %mods ) {
    $w = length if length > $w;
}
my @missing;
foreach( sort keys %mods ) {
    my $ver = $mods{$_};
    eval "require $_" or do {
        push @missing, $_;
        printf STDERR ( "Required Perl module %s is not installed\n", $_ );
        next;
    };
    if( $ver ne 'unknown' ) {
        eval "$_->VERSION( $ver )";
        if( $@ ) {
            $@ =~ s/^$_ /    /;
            $@ =~ s/ at .*\Z//s;
            $@ =~ s/this is only version/found version/;
            printf STDERR (
                    "Installed Perl module %s: version is less than %s\n%s\n",
                    $_, $ver, $@ );
            push @missing, $_;
            next;
        }
    }
    printf STDERR ( "Found %-*s version %s\n", $w, $_, $_->VERSION || '(unknown)' )
        unless( $quiet );
}

if( @missing ) {
    printf STDERR (
                    <<'XXX', @missing == 1 ? ( 'module is', 'it', 'its' ) : ( 'modules are', 'them', 'their' ) );
If the missing %s not available in your distribution (preferred),
you can install %s (and %s prerequisites) from CPAN with the following command:

XXX
    print STDERR ( "cpan install ", join( " ", @missing ), "\n" );
    exit 1;
} else {
    print STDERR ( "All prerequisites found\n" ) unless( $quiet );
}

exit;

sub version {
    printf( "%s version %s\n%s",                                           basename( $0 ),
            join( '-', ( $VERSION =~ /([[:xdigit:]]{4})/g )[ -4 .. -1 ] ), $copyright );
    exit;
}

sub help {
    my( $opt ) = @_;

    eval {
        no warnings 'once';
        $Pod::Usage::Formatter = 'Pod::Text::Termcap';
        require Pod::Usage;
    } or
        die( "Install Pod::Usage or use 'perldoc $0'\n" );
    Pod::Usage::pod2usage( 1 )                            if( $opt eq 'help' );
    Pod::Usage::pod2usage( -exitval => 0, -verbose => 2 ) if( $opt eq 'man' );
    exit( 255 );
}

__DATA__
Config            unknown
Cwd               3.60
Date::Parse       2.30
Errno             1.0901
Fcntl             1.05
File::Basename    2.74
File::Spec        3.60
File::Temp        0.2304
Getopt::Long      2.52
IO::Socket::IP    0.41
IO::Socket::SSL   2.080
MIME::Base64      3.13
MIME::QuotedPrint 3.13
Net::DNS          0.66
Net::SMTP         3.13
POSIX             1.09
Perl::OSType      1.002
Pod::Usage        1.69
Sys::Hostname     1.11
Text::Abbrev      1.02
Text::ParseWords  3.27
__END__

=pod

=head1 REQUIRED_MODULES

required_modules - verify that required Perl modules are installed

=head1 SYNOPSIS

required_modules [options] [file...]

Options:
  --quiet   --debug  --help --man --version

=head1 OPTIONS

=over 8

=item B<--quiet>

Only output errors.

=item B<--debug>

Debugging info.

=item B<--help>

This help.

=item B<--man>

Full manual.

=back

=head1 DESCRIPTION

Used at installation, lists missing modules and installed modules that don't
meet the version requirements.

Used when releases are made, specify the dependent programs; the list
of required modules will be output on F<stdout>.

An external tool, such as I<sed>, can replace the list, which is contained
in the I<__DATA__> section of B<required_modules>.


=head1 BUGS

Report any bugs, feature requests and/or patches on the issue tracker,
located at F<https://github.com/tlhackque/certtools/issues>.  In the
event that the project moves, contact the author directly.

=head1 AUTHOR

Timothe Litt  E<lt>litt@acm.orgE<gt>

=head1 COPYRIGHT and LICENSE

Copyright (c) 2021, 2023 Timothe Litt

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the author shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the author.

Any modifications to this software must be clearly documented by and
attributed to their author, who is responsible for their effects.

Bug reports, suggestions and patches are welcomed by the original author.

=head1 SEE ALSO

I<sed(1)>

I<POD version $Id$>

=cut
